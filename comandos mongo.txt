mongosh //para iniciar conexion
cls //limpiar consola
exit //salir

show dbs //mostrar databases
db.dropDatabase("usuarios") //eliminar database

use usuarios //para crear database
show collections  //mostrar colecciones

db.createCollection("usuario")  //crear coleccion

db.usuario.insertOne({
    "_id": ObjectId("123456789012"),
    "nombre": "Juan Pérez",
    "edad": 30,
    "correo": "juan@example.com",
    "ciudad": "Ciudad de México",
    "intereses": ["fútbol", "viajar", "lectura"],
    "amigos": [
      {"nombre": "María García", "edad": 28},
      {"nombre": "Carlos López", "edad": 32}
    ],
    "historial_compras": [
      {"producto": "Laptop", "precio": 1200},
      {"producto": "Teléfono", "precio": 800},
      {"producto": "Libro", "precio": 20}
    ],
    "ultima_conexion": ISODate("2024-04-27T18:30:00Z"),
    "activo": true
  }) // si no esta la coleccion la crea


db.usuario.find() //ver elementos
db.getCollection("usuario").find()


db.usuario.insertMany([
  {
    "_id": ObjectId("123456789013"),
    "nombre": "María García",
    "edad": 28,
    "correo": "maria@example.com",
    "ciudad": "Guadalajara",
    "intereses": ["pintura", "bailar", "senderismo"],
    "amigos": [
      {"nombre": "Juan Pérez", "edad": 30},
      {"nombre": "Luisa Martínez", "edad": 27}
    ],
    "historial_compras": [
      {"producto": "Cámara", "precio": 500},
      {"producto": "Botas de montaña", "precio": 120},
      {"producto": "Esmalte de uñas", "precio": 10}
    ],
    "ultima_conexion": ISODate("2024-04-26T12:45:00Z"),
    "activo": true
  },
  {
    "_id": ObjectId("123456789014"),
    "nombre": "Carlos López",
    "edad": 32,
    "correo": "carlos@example.com",
    "ciudad": "Monterrey",
    "intereses": ["cocina", "música", "tecnología"],
    "amigos": [
      {"nombre": "Juan Pérez", "edad": 30},
      {"nombre": "Luisa Martínez", "edad": 27}
    ],
    "historial_compras": [
      {"producto": "Teclado", "precio": 80},
      {"producto": "Audífonos", "precio": 50},
      {"producto": "Ingrediente X", "precio": 5}
    ],
    "ultima_conexion": ISODate("2024-04-25T09:15:00Z"),
    "activo": false
  }
])
//insertar varios




//insertar desde mongo compass
[{
  name: "fernando", age: 45, points: 7.1},
  {name: "pablo", age: 21, points: 7.0}
]

db.students.insertOne({
  name: "chema", 
  age: 23,
  tipo: true, 
  date: new Date("2020-02-01T00:00:00"), 
  graduacion:null, 
  courses:["uno","dos"],
  direccion:{
    calle:"bodeguilla",
    ciudad:"valladolid",
    zip:83838}
    }
  )
  //otro ejemplo de inserccion


db.usuario.find().sort({nombre:1}) //asc: primero a ultimo z
db.usuario.find().sort({nombre:-1})  //desc: primero z ultimo a
db.usuario.find().sort({edad:1}) //menos a mas
db.usuario.find().sort({edad:-1})  //mas a menos

db.usuario.find().sort({_id: -1}) //por fecha de creacion, mas recientes primero


db.usuario.find().sort({edad:-1}).limit(1)  //el de mas edad, limitando resultados

//compass
{name:1} y poner limit 1


db.usuario.find({edad:30, ciudad: "Ciudad de México"})  //dos condiciones


db.usuario.find({},{nombre: true})  //campos a mostrar, solo nombre
db.usuario.find({},{_id: false,nombre: true,edad:true}) //sin id, nombre y edad

//compass
{_id: false,nombre:true,edad:true}



db.usuario.updateOne({
  nombre:"Carlos López",
  edad:32},
  {$set: {ciudad:"Rio Janeiro"}}
)  
//criterio y el campo a modificar


db.usuario.updateOne({
  _id:ObjectId("313233343536373839303134")},
  {$set: {nombre:"Javier Martínez"}})
//actualizar por el id


db.usuario.updateOne({
  _id:ObjectId("313233343536373839303134")},
  {$unset: {edad:""}})  
//eliminar campo

db.usuario.updateOne({
  _id:ObjectId("313233343536373839303134")},
  {$set: {edad:32}}) 
//crear campo


db.usuario.updateMany({
  edad:{$gt:25}},
  {$set: {mayores25:true}})  
//todos los mayores de 25 se les pone atributo

db.usuario.updateMany({
  mayores25: {$exists:true}},
  {$set: {clienteHabitual:true}}) 
//los que tienen el atributo mayores25 se le pone atributo


//eliminar campo y añadir en compass
//exportar coleccion en compass
//eliminar elemento en compass


db.usuario.deleteOne({nombre:"Javier Martínez"}) //eliminar 1
db.usuario.deleteMany({mayores25: true}) //eliminar varios



//volvemos a insertar elementos como arriba


db.usuario.updateMany({
  edad:{$gt:30}},
  {$set: {mayores30:true}})  
//todos los mayores de 30 se les pone atributo



db.usuario.deleteMany({mayores30:{$exists:false}}) //borrar los que no tienen este campo



db.usuario.deleteOne({nombre:"Carlos López"})//eliminamos el que queda


//volver a insertar como hemos hecho arriba pero en este caso sin ids
db.usuario.insertMany([
  {
    "nombre": "María García",
    "edad": 28,
    "correo": "maria@example.com",
    "ciudad": "Guadalajara",
    "intereses": ["pintura", "bailar", "senderismo"],
    "amigos": [
      {"nombre": "Juan Pérez", "edad": 30},
      {"nombre": "Luisa Martínez", "edad": 27}
    ],
    "historial_compras": [
      {"producto": "Cámara", "precio": 500},
      {"producto": "Botas de montaña", "precio": 120},
      {"producto": "Esmalte de uñas", "precio": 10}
    ],
    "ultima_conexion": ISODate("2024-04-26T12:45:00Z"),
    "activo": true
  },
  {
    "nombre": "Carlos López",
    "edad": 32,
    "correo": "carlos@example.com",
    "ciudad": "Monterrey",
    "intereses": ["cocina", "música", "tecnología"],
    "amigos": [
      {"nombre": "Juan Pérez", "edad": 30},
      {"nombre": "Luisa Martínez", "edad": 27}
    ],
    "historial_compras": [
      {"producto": "Teclado", "precio": 80},
      {"producto": "Audífonos", "precio": 50},
      {"producto": "Ingrediente X", "precio": 5}
    ],
    "ultima_conexion": ISODate("2024-04-25T09:15:00Z"),
    "activo": false
  },{
    "nombre": "Juan Pérez",
    "edad": 30,
    "correo": "juan@example.com",
    "ciudad": "Ciudad de México",
    "intereses": ["fútbol", "viajar", "lectura"],
    "amigos": [
      {"nombre": "María García", "edad": 28},
      {"nombre": "Carlos López", "edad": 32}
    ],
    "historial_compras": [
      {"producto": "Laptop", "precio": 1200},
      {"producto": "Teléfono", "precio": 800},
      {"producto": "Libro", "precio": 20}
    ],
    "ultima_conexion": ISODate("2024-04-27T18:30:00Z"),
    "activo": true
  }
])

db.usuario.find().sort({_id: -1}) //por fecha de creacion, mostrar mas recientes primero


//tambien se puede importar el json anterior en compass


db.usuario.find({nombre:{$ne:"María García"}}) //nombre no María García
db.usuario.find({edad:{$lt:30}}) //menos de 30 de edad
db.usuario.find({edad:{$lte:30}})  //menos o igual
db.usuario.find({edad:{$gt:30}}) //mayor que
db.usuario.find({edad:{$gte:30}})  //mayor o igual
db.usuario.find({edad:{$gte:28 ,$lt:30}})  //mayor y menor en rango
db.usuario.find({nombre:{$in:['María García','Juan Pérez']}})  //nombre en array
db.usuario.find({nombre:{$nin:['María García','Juan Pérez']}})  //nombre no en array


db.usuario.find({nombre: {$regex: /María|Juan/i}}) //nombres que contengan Maria o Juan


//compass aplicar filtros de mayor y menor
{age:{$gte:22}}


db.usuario.find(
  {$and:
    [{edad:
        {$gte:30}},
          {activo:true}]}
)
//mas de 30 y activo true

db.usuario.find(
  {$or:
    [{edad:
        {$gte:30}},
          {nombre: 'María García'}]}
)
//or

db.usuario.find(
  {$nor:
    [{edad:
        {$gte:30}},
          { nombre: 'Carlos López'}]}
)
//ambas false

db.usuario.find(
  {$nor:
    [{edad:
        {$gte:30}},
          { nombre: 'María García'}]}
)
//no encuentra


//modificar age a null en compass

db.usuario.updateOne({ nombre: 'María García'}, { $set: { edad: null } }) //poner atributo a null

db.usuario.find({edad:{$not:{$gte:30}}}) //que no son mayores a 30, me da el nulo tambien

db.usuario.find({nombre: 'María García'}).explain("executionStats") //comprueba los documentos, los que existan
db.usuario.createIndex({nombre:1}) //crear indice

db.usuario.find({nombre: 'María García'}).explain("executionStats") //solo comprueba 1
db.usuario.getIndexes()  //ver indices, de inicio, hay uno en el id tambien
db.usuario.dropIndex("nombre_1")  //eliminar indice

//crear indice en compass
//los indices permiten buscar mas rapido. Recomendado si muchas busquedas pero sin actualizar. Actualizar e introducir va lento

db.usuario.updateOne({ nombre: 'María García'}, { $set: { edad: 31 } }) //reestablecer edad

db.usuario.find(
    {$and:
        [{edad:
            {$gte:30}},
            {nombre:
                {$in:["María García","Juan Pérez"]}
                    }
                    ]})
//nombres y con edad mas de 30



db.usuario.find(
    {$or:
        [{edad:
            {$gte:28}},
            {nombre:
                {$in:["María García","Juan Pérez"]}
                    }
                    ]})
//condicion or: nombre o edad

db.usuario.find(
    {$nor:
        [{edad:
            {$gte:34}},
            {nombre:
                {$in:["María García","Juan Pérez"]}
                    }
                    ]})
//ni nombre en los definidos ni edad superior a 34. Hay uno que es menor a 34 sin nombre de los comentados



db.usuario.find({edad:{$not:{$gt:31}}})
//los que no tienen mas de 31 de edad incluyendo null


db.createCollection("companeros",{capped:true,size:1000000,max:100},{autoIndexId:false})
//capped limita el tamaño que se pone en size como maximo y en max maximo de documentos
//autoindex aplicar indice al object id
db.createCollection("amigos")
db.amigos.drop()  //eliminar colecciones
db.companeros.drop()
show collections  //ver colecciones




//las aggregations pueden tener varios pasos. Cada paso coge la informacion del paso anterior
db.usuario.updateOne({ nombre: "Juan Pérez"}, { $set: { ciudad: "Guadalajara" } })

db.usuario.aggregate([
  {
    $match:{edad:{$gte:30}} 
  },
  {
    $group: { _id: "$ciudad", sumaEdad: { $sum: "$edad" } }
  }
])

//filtra mayores de 30, agrupa por la ciudad y suma sus edades



db.usuario.aggregate(
    [ { $group : { _id : "$ciudad" } } ]
)
//muestra diferentes valor en ciudad


//project define los campos a mostrar
db.usuario.aggregate([ 
  { 
    $sort: { "edad": -1 } 
  },
  {
    $project: {
      "nombre": 1,
      "ciudad": 1,
      "edad":1
    }
  },
  {
    $limit: 5
  }
])
//ordena por edad de mayor a menor
//limita a 5 resultados


//match filtra los que cumplen
db.usuario.aggregate([ 
  { $match : { ciudad : "Guadalajara" } },
  { $limit: 2 },
  { $project: {
    "nombre": 1,
    "edad": 1,
    "activo": 1
  }}
])


//cuenta los de ciudad Guadalajara
db.usuario.aggregate([
  {
    $match: { "ciudad": "Guadalajara" }
  },
  {
    $count: "cuenta"
  }
])

//realiza operacion y lo guarda en coleccion. Agrupa por ciudad
db.usuario.aggregate([
  {
    $group: {
      _id: "$ciudad",
    },
  },
  { $out: "colecAgrup" }
])

db.colecAgrup.find() //ver resultado
db.colecAgrup.drop() //eliminamos coleccion
show collections


//que tengan Mar
db.usuario.find({ nombre: { $regex: /Mar/ } })


//activo, edad y ciudad
db.usuario.aggregate([
  {
    $match: {
      activo:true,
      edad: { $gte:30 },
      ciudad: "Guadalajara"
    }
  }
])


//agrupa por ciudad y suma edades
db.usuario.aggregate([
  {
    $group: {
      _id: "$ciudad",
      suma: { $sum: "$edad" }
    }
  }
])



//que sean mayores 30, los agrupa por ciudad y pone suma de sus edades
db.usuario.aggregate([
  {
    $match: {
      edad: { $gte:30 }
    }
  },
  {
    $group: {
      _id: "$ciudad",
      total: { $sum: "$edad" }
    }
  }
])




//solo mostrar estos campos
db.usuario.aggregate([
  {
    $project: {
      _id: 0, 
      nombre: 1, 
      edad: 1, 
      activo: 1
    }
  }
])

//anadimos campos
db.usuario.updateOne({ nombre: "Juan Pérez"}, { $set: { edadHijoMayor: 11 } })
db.usuario.updateOne({ nombre: "María García"}, { $set: { edadHijoMayor: 9 } })
db.usuario.updateOne({ nombre: "Carlos López"}, { $set: { edadHijoMayor: 9 } })

//solo muestra unos campos y hace calculo
db.usuario.aggregate([
  {
    $project: {
      nombre: 1,
      edad: 1,
      diferencia: { $subtract: ["$edad", "$edadHijoMayor"] }
    }
  }
])


db.usuario.countDocuments() //contar elementos


db.usuario.find({ intereses: "viajar" }) //los que tienen en intereses viajar



db.usuario.aggregate([
  {
    $project: {
      nombre: 1,
      numero_amigos: { $size: "$amigos" }
    }
  },
  {
    $sort: { numero_amigos: -1 }
  }
])
//numero de amigos de cada usuario ordenado de mayor a menor



db.usuario.aggregate([
  {
    $unwind: "$amigos" 
  },
  {
    $group: {
      _id: "$nombre", 
      media_edad_amigos: { $avg: "$amigos.edad" } 
    }
  }
])
//media de la edad de los amigos de cada usuario


// unwind Desagrupa los documentos por cada amigo
db.usuario.aggregate([
  {
    $unwind: "$amigos" 
  }
])

//crea vaias Marias cada una con un amigo


//insertar amigo
db.usuario.updateOne(
   { nombre: "Juan Pérez" }, 
   { $push: { amigos: { nombre: "Fede Gonzalez", edad: 25 } } } 
)



db.usuario.aggregate([
  {
    $unwind: "$historial_compras" 
  },
  {
    $group: {
      _id: "$nombre", 
      total_gastado: { $sum: "$historial_compras.precio" } 
    }
  }
])

//cuanto se ha gastado cada usuario



//solo el que mas ha gastado
db.usuario.aggregate([
  {
    $unwind: "$historial_compras" 
  },
  {
    $group: {
      _id: "$nombre", 
      total_gastado: { $sum: "$historial_compras.precio" } 
    }
  },
  {
    $sort: { total_gastado: -1 } 
  },
  {
    $limit: 1 
  }
])


db.usuario.find({ "amigos.nombre": "María García" }, { nombre: 1 }) //usuarios que tienen de amiga a Maria


db.usuario.aggregate([
  {
    $unwind: "$historial_compras" 
  },
  {
    $match: {
      "historial_compras.precio": { $gt: 250 } 
    }
  },
  {
    $count: "total_compras_superior_250" 
  }
])

//cuantas compras en total entre todos los usuario mayores a 250



//editar nombre de una compra
db.usuario.updateOne(
   { nombre: "Juan Pérez", "historial_compras.producto": "Teléfono" }, 
   { $set: { "historial_compras.$.producto": "Teclado" } } 
)


db.usuario.aggregate([
  {
    $unwind: "$historial_compras" 
  },
  {
    $group: {
      _id: "$historial_compras.producto", 
      total_gastado: { $sum: "$historial_compras.precio" } 
    }
  }
])
//suma importes compras por tipo